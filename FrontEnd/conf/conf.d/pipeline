pipeline {
    agent any // 사용 가능한 에이전트에서 이 파이프라인 또는 해당 단계를 실행
    
    //jenkins tools 선언
    tools {
        nodejs "NodeTool"
    }
    
    //환경 변수
    environment{
        BE_IMAGE_NAME = "minyumanyu/special-be" //Docker image 이름 (계정/저장소) 형태로 
        FE_IMAGE_NAME = "minyumanyu/special-fe" //도커 이미지 이름은 소문자를 권장한다.
        DOCKER_ID = "dldnr789@gmail.com"
        DOCKER_PW = "Pby!pby5915@"
    }

    stages {
        stage('Git Clone') {
            steps {
                sh '''echo 깃허브 체크아웃 및 클론 '''
                git branch: 'dev', credentialsId: 'github-auth-token', url: 'https://github.com/Devwooki/Special'
            }
        }

        stage('BackEnd build'){
            steps{
                // 기존 빌드 결과물 삭제
                sh 'rm -rf build'

                sh'''
                echo 깃허브 BackEnd 빌드 Start
                '''
                // 프로젝트가 있는 폴더로 이동한다.
                dir('/var/jenkins_home/workspace/Special_auto_build/BackEnd') {
                    //권한 문제가 발생해 777로 변경 후 데몬 없이 빌드를 시작한다.
                    //데몬이 있을 경우 가끔 메모리 터지는 경우가 있어서..
                    sh '''
                        chmod +x gradlew
                        ./gradlew clean bootJar --no-daemon
                        ls -al
                        '''
                }
            }
            post {
                // build 성공시
                success {
                    echo 'gradle build success'
                }
                // build 실패시
                failure {
                    echo 'gradle build failed'
                }
            }
        }
        
        stage('Dockerization BackEnd'){
            steps{
                sh 'echo " BackEnd Image Bulid Start"'
                // var/lib/jenkins에서 dockerfile이 있는 곳으로 경로 이동
                // 도커 빌드와 캐시를 삭제한다, || true는 에러가 발생해도 진행되도록한다.
                // dockerfile을 수행하여 지정한 이름으로 이미지를 만든다.
                // 도커에 로그인한 후, 생성한 이미지를 push한다.
                // 푸시한 후 빌드한 이미지는 삭제한다. 메모리 관리를 위해 -&gt; 도커 허브로 push 하는거 잠시 보류
                dir('/var/jenkins_home/workspace/Special_auto_build/BackEnd') {
                    sh '''
                        docker build --no-cache -t ${BE_IMAGE_NAME} .
                        '''
                        // echo ${DOCKER_PW} | docker login -u ${DOCKER_ID} --password-stdin
                        // docker push ${BE_IMAGE_NAME}
                        // docker rmi -f ${BE_IMAGE_NAME}
                }
            }
            post {
                // 이미지 전송 성공시
                success {
                    sh 'echo "PUSH Docker BE Image Success"'
                }
                // 이미지 전송 실패시
                failure {
                    sh 'echo "PUSH Docker BE Image Fail"'
                }
            }
        }
        
        stage('Dockerizing FrontEnd') {
            steps {
                sh 'echo "Image Bulid Start"'
                dir('/var/jenkins_home/workspace/Special_auto_build/FrontEnd') {
                sh """
                    docker build  --no-cache -t ${FE_IMAGE_NAME} . 
                """
                    // echo ${DOCKER_PW} | docker login -u ${DOCKER_ID} --password-stdin
                    // docker push ${FE_IMAGE_NAME}
                    // docker rmi -f ${FE_IMAGE_NAME}
                }
            }
            post {
                success {
                    sh 'echo "Bulid Docker Image Success"'
                }

                failure {
                    sh 'echo "Bulid Docker Image Fail"'
                }
            }
        }
        
        // stage('FrontEnd build'){
        //     steps{
        //         sh'''
        //         echo 깃허브 FrontEnd 빌드 Start
        //         '''
        //         // 프로젝트가 있는 폴더로 이동한다.
        //         dir('/var/jenkins_home/workspace/Special_auto_build/FrontEnd') {
        //             // var/lib/jenkins에서 react 파일이 있는 경로로 이동
        //             // npm install 후 build 실행
        //             // --no-fund --no-audit --no-warnings-flags 설정들은 빌드가 막히지 않도록 도와준다
        //             sh '''
        //                 npm install --no-fund --no-audit
        //                 npm run build --no-warnings-flags
        //                 ls -al
        //             '''
        //         }
        //     }
        //     post {
        //         success {
        //             echo 'npm build success'
        //         }   
        //         failure {
        //             echo 'npm build failed'
        //         }
        //     }
        // }
    }
}